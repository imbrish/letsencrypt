#!/usr/bin/env php
<?php

use League\CLImate\CLImate;
use Imbrish\LetsEncrypt\Command;
use Symfony\Component\Yaml\Yaml;
use Symfony\Component\Yaml\Exception\ParseException;

// define exit codes

const EX_AUTOLOAD_NOT_FOUND    = 1;
const EX_OPENSSL_NOT_FOUND     = 2;
const EX_INVALID_SAPI          = 3;
const EX_CONFIG_NOT_FOUND      = 4;
const EX_CONFIG_PARSING_ERROR  = 5;
const EX_PROCESSING_ERROR      = 6;
const EX_NAMESERVER_HACK_ERROR = 11;

// autoload and check environment

$base = realpath(__DIR__ . '/..');

if (! file_exists($base . '/vendor/autoload.php')) {
    echo 'You need to install the composer dependencies!' . PHP_EOL;
    exit(EX_AUTOLOAD_NOT_FOUND);
}

require $base . '/vendor/autoload.php';

$climate = new CLImate;

if (! function_exists('openssl_pkey_get_private')) {
	$climate->error('You need to enable OpenSSL in your php.ini!');
    exit(EX_OPENSSL_NOT_FOUND);
}

if (! in_array(PHP_SAPI, ['cli', 'phpdbg'], true)) {
    $climate->error('Please run this script on the command line!');
    exit(EX_INVALID_SAPI);
}

// define and parse arguments

$climate->arguments->add([
    'notify' => [
        'prefix'       => 'n',
        'longPrefix'   => 'notify',
        'description'  => 'Send notification to email defined in config file',
        'noValue'      => true,
    ],
]);

$climate->arguments->parse();

// load configuration

if (! file_exists($base . '/config.yml')) {
    $climate->error('Config file could not be found!');
    exit(EX_CONFIG_NOT_FOUND);
}

try {
    $config = Yaml::parse(file_get_contents($base . '/config.yml'));
} catch (ParseException $e) {
    $climate->error('There was an error when parsing config file!');
    exit(EX_CONFIG_PARSING_ERROR);
}

$config['base'] = $base;
$config['storage'] = $config['base'] . '/storage';

$server = \Kelunik\AcmeClient\resolveServer($config['server']);
$dir = \Kelunik\AcmeClient\serverToKeyname($server);

$config['certs'] = $config['storage'] . '/certs/' . $dir;

// set environment variables

putenv('USER=' . $config['cpanel']['user']);
putenv('PASS=' . $config['cpanel']['password']);

// insert custom nameserver into 'acme issue' command
// find resolve command, insert or replace nameserver if defined, remove otherwise

$path = $config['base'] . '/vendor/kelunik/acme-client/src/Commands/Issue.php';
$search = '/(?<=\\\Amp\\\Dns\\\resolve\(\$domain, \[)(\s*)(?:"server" => ".*",\s*)?(?="types" =>)/';
$replace = '$1' . ($config['nameserver'] ? '"server" => "' . $config['nameserver'] . '",$1' : '');

$content = preg_replace($search, $replace, file_get_contents($path), -1, $count);

if (! $count) {
    $climate->error("Could not replace nameserver used by 'acme issue' command.");
    exit(EX_NAMESERVER_HACK_ERROR);
}

file_put_contents($path, $content);

// setup command class

Command::$aliases = [
    'acme' => $config['base'] . '/bin/acme',
    'sslic' => $config['base'] . '/vendor/ronindesign/sslic/sslic.php',
];

Command::$defaults = [
    'acme' => [
        '--server' => $config['server'],
        '--storage' => $config['storage'],
    ],
];

// send email notification

function notify($subject, $message) {
    global $climate, $config;

    if (! $climate->arguments->get('notify')) {
        return;
    }

    mail($config['notify'], $subject, $message);
}

// report processing error

function error($message) {
    global $climate;

    notify($message, Command::$last . PHP_EOL . Command::$output);

    $climate->error($message);
    exit(EX_PROCESSING_ERROR);
}

// recursively remove directory

function rrmdir($dir) {
    if (! is_dir($dir)) {
        return;
    }

    foreach (array_diff(scandir($dir), ['.','..']) as $file) {
        if (is_dir($path = $dir . '/' . $file)) {
            rrmdir($path);
        }
        else {
            unlink($path);
        }
    }

    rmdir($dir);
}

// register a certification account

Command::exec('acme', [
	'setup',
	'--email' => $config['email'],
]);

if (Command::$result != 0) {
    error('Failed to setup acme client');
}

// check, issue and setup certificates

$notifications = [];

foreach ($config['certificates'] as $certificate) {
    // extract domains array

    $domains = [];

    foreach ($certificate['domains'] as $path => $names) {
        foreach ((array) $names as $name) {
            $domains[$name] = $config['home'] . $path;
        }
    }

    $domainNames = array_keys($domains);
    $domainPaths = array_values($domains);

    $name = $domainNames[0];
    $path = $config['certs'] . '/' . $name;

    // check whether certificate should be renewed

	Command::exec('acme', [
        'check',
        '--name' => $name,
        '--ttl' => $config['renew'],
        '--names' => implode(',', $domainNames),
    ]);

    if (Command::$result == 255) {
        error('Error when checking certificate for ' . $name);
    }

    // issue new certificate

    if (Command::$result == 0) {
        $climate->info('Certificate still valid for domains: ' . implode(', ', $domainNames) . '.');
    }
    else {
        Command::exec('acme', [
            'issue',
            '--domains' => implode(':', $domainNames),
            '--path' => implode(':', $domainPaths),
            '--bits' => $certificate['bits'],
        ]);

        // remove challenge directories
        foreach (array_unique($domainPaths) as $dir) {
            rrmdir($dir . '/.well-known');
        }

        if (Command::$result != 0) {
            rrmdir($path);
            error('Error when issuing certificate for ' . $name);
        }

        // ensure installation of newly issued certificate
        foreach (glob($path . '/installed.*') as $marker) {
            unlink($marker);
        }

        $notifications[] = 'Certificate issued for domains: ' . implode(', ', $domainNames) . '.';

        $climate->info(end($notifications));
    }

    // install certificate in cpanel for corresponding domains

    $installDomains = array_map(function ($domain) {
        // remove www prefix
        return substr(strtolower($domain), 0, 4) == 'www.'
            ? substr($domain, 4)
            : $domain;
    }, $domainNames);

    if (is_array($whitelist = $config['install']['whitelist'])) {
        $installDomains = array_intersect($installDomains, $whitelist);
    }

    if (is_array($blacklist = $config['install']['blacklist'])) {
        $installDomains = array_diff($installDomains, $blacklist);
    }

    $installDomains = array_unique($installDomains);

    foreach ($installDomains as $domain) {
        if (file_exists($path . '/installed.' . $domain)) {
            continue;
        }

        Command::exec('sslic', [
            $domain,
            $path . '/cert.pem',
            $path . '/key.pem',
            $path . '/chain.pem',
        ]);

        if (Command::$result != 0) {
            error('Error when installing certificate for ' . $domain);
        }

        if (file_exists($path)) {
            // prevent installing same certificate for same domain again in the future
            touch($path . '/installed.' . $domain);
        }
    }

    if ($installDomains) {
        $notifications[] = 'Certificate installed for domains: ' . implode(', ', $installDomains) . '.';

        $climate->info(end($notifications));
    }
}

if ($notifications) {
    notify('New certificates have been issued', implode(PHP_EOL, $notifications));
}
else {
    $climate->info('No certificates were issued.');
}
